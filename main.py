import asyncio
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.enums.parse_mode import ParseMode

API_TOKEN = 'TOKEN' #–¢–æ–∫–µ–Ω –±–æ—Ç–∞.
GROUP_ID = -1002415267780  # –ê–π–¥–∏ —á–∞—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –∞–≥–∞ –Ω—É. –ê–π–¥–∏ —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100. –Ø —Å —ç—Ç–∏–º –≤—Å–µ –º–æ–∑–≥–∏ –≤—ã–µ–±–∞–ª))
BAD_WORDS = ['—Ä–∞–±–æ—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '18 –ª–µ—Ç', '–ª–µ–≥–∞–ª—å–Ω–∞—è', '–≤ –ª—Å']  # –ë–∞–Ω –≤–æ—Ä–¥—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å!

bot = Bot(token=API_TOKEN)
router = Router()
router.message.filter(F.chat.type != "private")
dp = Dispatcher()

blocked_users = {}

@dp.message(Command("unmute"))
async def send_help(message: types.Message, command: CommandObject, bot: Bot):
    reply_message = message.reply_to_message 
    if message.chat.id == GROUP_ID:
        if not reply_message or not await is_admin(message, bot):
            await message.reply("<b>‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>", parse_mode=ParseMode.HTML)

        elif reply_message and is_admin(message,bot):
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id, permissions=types.ChatPermissions(can_send_messages=True, can_send_other_messages=True))
            await message.answer(f"üéâ –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.reply_to_message.from_user.first_name}</b> –±—ã–ª–∏ —Å–Ω—è—Ç—ã!", parse_mode=ParseMode.HTML)
    
@dp.message(F.chat.type == "private")
async def private(message: types.Message):
    await message.reply("üòî <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>")


async def is_admin(message, bot):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    bot = await bot.get_chat_member(message.chat.id, bot.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR] or bot.status != ChatMemberStatus.ADMINISTRATOR:
        return False
    return True

@dp.message(F.text)
async def check_bad_words(message: Message):
    if message.chat.id == GROUP_ID:
        for bad_word in BAD_WORDS: #–ø–æ–∏—Å–∫ –±–∞–Ω –≤–æ—Ä–¥–∞
            if bad_word in message.text.lower():
                reply_message = message.reply_to_message
                await message.reply(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>[{message.from_user.first_name}]</b>, –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ. \n–ï—Å–ª–∏ –≤–∞—Å –∑–∞–º—É—Ç–∏–ª–∏ –ø–æ –æ—à–∏–±–∫–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é!", parse_mode=ParseMode.HTML)
                await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id, permissions=types.ChatPermissions(can_send_messages=False)) #–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await asyncio.sleep(3) #—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                return

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())